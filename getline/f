
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include "_getline.h"


char *find_line(read_t *reader)
{
	int i, j;
	char *line, *tmp, *buf;

	for (i = 0; i < reader->size; i++)
	{
		if (reader->buf[i] == '\n')
		{
			line = (char *)malloc(sizeof(char) * (i + 1));
			strncpy(line, reader->buf, i);
			i += 1;
			line[i] = '\0';
			buf = (char *)malloc(sizeof(char) * (reader->size - i + 1));
			for (j = 0; j + i < reader->size; j++)
			{
				buf[j] = reader->buf[i + j];
			}
			buf[j] = '\0';
			free(reader->buf);
			reader->buf = buf;
			reader->size = j;
			return (line);
		}
	}
	tmp = (char *)malloc(sizeof(char) * reader->size + 1);
	strcpy(tmp, reader->buf);
	tmp[reader->size] = '\0';
	free(reader->buf);
	buf = (char *)malloc(sizeof(char) * READ_SIZE);
	reader->size = read(reader->fd, buf, READ_SIZE);
	if (reader->size < 1)
	{
		free(buf);
		free(reader->buf);
		free(reader);
	}
	else
	{
		reader->buf = buf;
	}
	return (tmp);
}


char *_getline(const int fd)
{
	static read_t *reader;
	char *buffer;

	if (fd < 0)
		return (NULL);

	if (reader == NULL)
	{
		reader = (read_t *)malloc(sizeof(read_t));
		if (reader == NULL)
			return (NULL);
		reader->fd = fd;
		buffer = (char *)malloc(sizeof(char) * READ_SIZE);
		if (buffer == NULL)
			return (NULL);
		reader->size = read(fd, buffer, READ_SIZE);
		reader->buf = buffer;
	}
	else if (reader->fd != fd)
	{
		reader = (read_t *)malloc(sizeof(read_t));
		reader->fd = fd;
		if (reader == NULL)
			return (NULL);
		buffer = (char *)malloc(sizeof(char) * READ_SIZE);
		if (buffer == NULL)
			return (NULL);
		reader->size = read(fd, buffer, READ_SIZE);
		reader->buf = buffer;
	}

	return (find_line(reader));
}

vagrant@vagrant:~/holbertonschool-system_linux/0x01-getline$ gcc -Wall -Wextra -Werror -pedantic -g 1-main.c _getline.c -o getline
vagrant@vagrant:~/holbertonschool-system_linux/0x01-getline$ ./getline
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
?
#
include "_getline.h"
?
/**?
 * main - entry point.
 *P
 * Return: always 0.t
 */?
int
 main(void)
{(
    int fd;
    char *line;

    fd = open("1-main.c", 0); // 0 =
0_RDONLY
    while ((line = _getline(fd)))0
    {U
        printf("%s\n", line);l

       free(line);
    }U
    close(fd);
    return (0);
}#
free(): double free detected in tcache 2
Aborted (core dumped)


ideal:


#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

#include "_getline.h"

/**
 * main - entry point.
 *
 * Return: always 0.
 */
int main(void)
{
    int fd;
    char *line;

    fd = open("1-main.c", 0);
    while ((line = _getline(fd)))
    {
        printf("%s\n", line);
        free(line);
    }
    close(fd);
    return (0);
}
