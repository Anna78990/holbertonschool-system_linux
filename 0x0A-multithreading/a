The goal of this task is to reproduce the previous task, and to improve it using a thread pool. The tread pool will have for purpose to execute a list of tasks.

For this task, you will have to write 3 functions (all in the same file):

Create task

Prototype: task_t *create_task(task_entry_t entry, void *param);, where
entry is a pointer to the entry function of the task,
param is the parameter that will later be passed to the entry function
This function must return a pointer to the created task structure
Destroy task

Prototype: void destroy_task(task_t *task);, where
task is a pointer to the task to destroy
Execute task list - Thread entry

Prototype: void *exec_tasks(list_t const *tasks);, where
tasks is a pointer to the list of tasks to be executed
This function serves as a thread entry
This function can safely return NULL as its return value will not be retrieved
This function must go through the list of tasks and execute them, but there’s a challenge:
Multiple thread will be going through the list of tasks, and a task must only be executed once
You must use tprintf to print when a task is started, and completed
Structures

typedef void *(*task_entry_t)(void *);

/**
 * enum task_status_e - Task statuses
 *
 * @PENDING: Task is pending
 * @STARTED: Task has been started
 * @SUCCESS: Task has completed successfully
 * @FAILURE: Task has completed with issues
 */
typedef enum task_status_e
{
    PENDING = 0,
    STARTED,
    SUCCESS,
    FAILURE
} task_status_t;

/**
 * struct task_s - Executable task structure
 *
 * @entry:  Pointer to a function to serve as the task entry
 * @param:  Address to a custom content to be passed to the entry function
 * @status: Task status, default to PENDING
 * @result: Stores the return value of the entry function
 * @lock:   Task mutex
 */
typedef struct task_s
{
    task_entry_t    entry;
    void        *param;
    task_status_t   status;
    void        *result;
    pthread_mutex_t lock;
} task_t;

main.c:
#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include "multithreading.h"

#define NB_THREADS  8

/**
 * print_task_result - Print the result of a task
 *
 * @task: Pointer to the task to print the result of
 */
void print_task_result(task_t *task)
{

    list_t *factors = (list_t *)task->result;
    node_t *factor;

    printf("%s =", (char *)task->param);
    for (factor = factors->head; factor; factor = factor->next)
    {
        unsigned long n = *((unsigned long *)factor->content);

        printf("%s %lu", factor->prev ? " *" : "", n);
    }
    printf("\n");
}

/**
 * main - Entry point
 *
 * @ac: Arguments count
 * @av: Arguments vector
 *
 * Return: EXIT_SUCCESS upon success, EXIT_FAILURE otherwise
 */
int main(int ac, char **av)
{
    list_t tasks;
    pthread_t threads[NB_THREADS];
    size_t i;

    if (ac < 2)
    {
        fprintf(stderr, "Usage: %s n\n", av[0]);
        return (EXIT_FAILURE);
    }

    if (!list_init(&tasks))
        return (EXIT_FAILURE);

    for (i = 1; i < (size_t)ac; i++)
        list_add(&tasks,
            create_task((task_entry_t)prime_factors, av[i]));

    printf("Executing %lu tasks on %u threads\n", tasks.size, NB_THREADS);

    for (i = 0; i < NB_THREADS; i++)
        pthread_create(&threads[i], NULL,
            (void *(*) (void *))exec_tasks, &tasks);
    for (i = 0; i < NB_THREADS; i++)
        pthread_join(threads[i], NULL);

    list_each(&tasks, (node_func_t)print_task_result);

    list_destroy(&tasks, (node_func_t)destroy_task);

    return (EXIT_SUCCESS);
}

you can use this list.c
list.c:
https://s3.eu-west-3.amazonaws.com/hbtn.intranet/uploads/text/2020/6/876fd3ce1c3a690faa56139f88efd28a0561fbf9.c?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA4MYA5JM5DUTZGMZG%2F20230524%2Feu-west-3%2Fs3%2Faws4_request&X-Amz-Date=20230524T000739Z&X-Amz-Expires=345600&X-Amz-SignedHeaders=host&X-Amz-Signature=42b6572f37e1d805fdf797438f0c91920344b06625597a7d42245be6e3335dcb

20-tprintf.c:
£include <stdio.h>
£include <stdarg.h>
£include <pthread.h>

static pthread_mutex_t mutex;

/**
 * tprintf - Thread-safe printf using a mutex
 * @format: Format string
 *
 * Return: Number of characters printed
 */
int tprintf(char const *format, ...)
{
	va_list args;
	int ret;

	pthread_mutex_lock(&mutex);

	printf("[%lu] ", pthread_self());

	va_start(args, format);
	ret = vprintf(format, args);
	va_end(args);

	pthread_mutex_unlock(&mutex);

	return (ret);
}

/**
 * init_mutex - initialize mutex
 */
void __attribute__((constructor)) init_mutex(void)
{
	pthread_mutex_init(&mutex, NULL);
}

/**
 * destroy_mutex - destroy mutex
 */
void __attribute__((destructor)) destroy_mutex(void)
{
	pthread_mutex_destroy(&mutex);
}

output I want is:

gcc -Wall -Wextra -Werror -pedantic -g3 main.c 22-prime_factors.c 21-prime_factors.c list.c 20-tprintf.c -o 22-prime_factors -pthread
->
./22-prime_factors 234 23456 908345 9803475893 389475 9384 7538 4753876348956746 4985 39485734 9587398 7938475839 324 3453450
Executing 14 tasks on 8 threads
[139770218567424] [00] Started
[139770218567424] [00] Success
[139770218567424] [08] Started
[139770218567424] [08] Success
[139770218567424] [09] Started
[139770218567424] [09] Success
[139770218567424] [10] Started
[139770218567424] [10] Success
[139770218567424] [11] Started
[139770218567424] [11] Success
[139770218567424] [12] Started
[139770218567424] [12] Success
.
.
.
